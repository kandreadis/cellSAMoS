# ! CONFIGURATION file for SAMoS

# Saving Simulation log to file *.msg
messages messages.msg

# Setting simulation box dimensions
box periodic { lx = @L;  ly = @L;  lz = @L }

# Reading initial cells
input particles.txt

# Setting cutoff distance and padding.
nlist { rcut = 3.5; pad = 0.5 }

# Defining cell group(s)
group tumoroid {type = 1}
group ecm {type = 2}

# Setting constraint for cells to move on.
constraint none {}

# Defining pair potential for cell-cell interaction.
pair_potential soft_attractive { re_fact=@re; use_particle_radii; phase_in=linear; min_val=0.0; max_val=1.0 }

# Defining the interaction between cell group(s)
pair_param soft_attractive { type_1 = 1; type_2 = 1; k=@kcc }
pair_param soft_attractive { type_1 = 1; type_2 = 2; k=@kce }
pair_param soft_attractive { type_1 = 2; type_2 = 2; k=@kee }


# Applying relaxation: very slowly move the TA cells without active velocity or noise
timestep 0.1
integrator brownian { seed = 1;  nu = 0.0; mu = 1.0;  v0 = 0.0; group = all}
run 10000
disable brownian { group = all}

timestep @dt
# Defining the integrator.
# alpha  = v0, mu = 1/zeta mobility / friction coefficient. mur = Dr rotational diffusion coefficient
# external self_propulsion { type = 1;  alpha = 0.2 }

pair_potential abp_actreact { p = 0.1; r_int = @ri; use_particle_radii; phase_in=linear; min_val=0.0; max_val=1.0 }
pair_type_param abp_actreact { type = 1; p = @v0 }
pair_type_param abp_actreact { type = 2; p = 0.0 }

integrator brownian_pos { group = all; seed = 3; mu = 1.0}
integrator brownian_align { group = all; seed = 4;  nu = @Dr; mur = 1.0;}

# Applying density population control.
# population density {group = tumoroid; seed = 10; division_rate = 0.01; death_rate = 0.0; split_distance = 0.01; rho_max = 12.0; poly = 0.3; freq = 97}

population density {group = tumoroid; seed = 12; freq = 97; division_rate = @divcell; death_rate = @deathcell; split_distance=0.01; move_split = 1.0;  rho_max = 12; change_prob_1=0.0; change_prob_2 = @divasymprob; old_group = tumoroid; new_group = ecm; old_type = 1; new_type = 2;  new_r = @rcell; poly = @polycell; } 

# Saving raw data and visualisation vtp results.
dump output { type=full; start=0; freq=@freqDAT; multi; id; tp; flag; radius; coordinate; velocity; director; header }
dump output { type=vtp; start=0; freq=@freqVTP; multi }

# Running the simulation for a number of time steps.
run @Nframes