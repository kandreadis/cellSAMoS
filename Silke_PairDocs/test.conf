# *****************************************************************************
# *
# *  This Python script is a part of tha analysis of the data published in 
# *  the paper: "Universal motion patterns in confluent cell monolayers"
# *  by Silke Henkes, Kaja Kostanjevec, J. Martin Collinson, Rastko Sknepnek, 
# *  and Eric Bertin, Jounral name, vol, page (2019).
# *
# *  Please refer to the document Computational_summary.pdf for a detailed
# *  description of the tasks performed by this script.
# * 
# *****************************************************************************


# All runtime messages will be sent to file messages.msg
messages messages.msg

# Every simulation requires a box
# "periodic" means that periodic boundary are applied.
# box is cubic with size 100x100x10 (units of particle radius r = 1)
box periodic { lx = 100.0;  ly = 100.0;  lz = 5.0 }

# We read in particle positions 
# This is for now our spherical relaxed initial configuration
input mixed.dat


# Group 1 is the moving type, group 2 is the ecm type
group g1 { type = 1 }
group g2 { type = 2 }

# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
# Triangulation is for Voronoi, no triangulation is for contact
nlist { rcut = 2.4; pad = 0.5}

# We constrain all particles to move only on the xy plane with lx=100, ly = 100 (actually those are read from the box)
constraint plane { lx = 100.0;  ly = 100.0;  }

# Initially, turn on only the soft potential for relaxation
# border particles are stiffer to avoid going through
pair_potential soft_attractive {k=1.0; re_fact = 1.15; use_particle_radii; phase_in=linear; min_val=0.0; max_val=1.0}
pair_param soft_attractive { type_1 = 1; type_2 = 1; k=1.0 }
pair_param soft_attractive { type_1 = 1; type_2 = 2; k=1.0 }



log equilibration.log {freq = 1000; soft_attractive_energy}


dump obstacle { type = vtp; start=0; freq=100; multi }
## This is a relaxation step: very slowly move the TA cells without active velocity or noise
timestep 0.1
integrator brownian { dt=0.1; seed = 1;  nu = 0.0; mu = 1.0;  v0 = 0.0; group = all}
run 10000
disable brownian { group=all}



# Now we are at the point to execute actual simulations. 
# We switch the integrator to brownian with the proper parmeters.

# Our active action-reaction interaction is technically a pair interaction
pair_potential abp_actreact {p = 0.1; r_int = 1.5; use_particle_radii; phase_in=linear; min_val=0.0; max_val=1.0}
pair_type_param abp_actreact { type = 1; p = 0.5 }
pair_type_param abp_actreact { type = 2; p = 0.0 }

# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# dt is the integrator time step 
# nu sets the width of the distribution for random changes of velocity
# mu is particle mobility
# v0 is the intensity of the self-propelling velocity

# non-obstacles
timestep 0.01
#external self_propulsion {type = 1;  alpha = @V0}
integrator brownian_pos { group = all;  dt=0.01; seed = 1; mu = 1.0}
integrator brownian_align { group = all; dt=0.01; seed = 1;  nu = 1.0; mur = 1.0;}

# Run without saving to achieve steady state
run 100000

# diagnostic output
dump obstacle { type = full; start=0; freq=1000; multi; id; tp; radius; coordinate; velocity; director; normal; area; boundary; keys}

# fixed run time
run 200000





